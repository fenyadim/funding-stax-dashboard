datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)

  payouts      Payouts[]
  accounts     Account[]
  sessions     Session[]
  verification VerificationCode?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payouts {
  id        String     @id @default(cuid())
  userId    String
  amount    Float
  status    Status
  challenge Challenge?

  User User @relation(fields: [userId], references: [id])
}

model Challenge {
  id            String        @id @default(cuid())
  userId        String
  type          String
  value         Float
  paymentMethod PaymentMethod
  newTrading    Boolean
  payout        Payouts       @relation(fields: [payoutId], references: [id])
  payoutId      String        @unique
  createdAt     DateTime      @default(now())
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  code      String
  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum Role {
  USER
  ADMIN
}

enum Status {
  WAITING
  COMPLETED
  INCOMPLETE
  PROCESSING
}

enum PaymentMethod {
  CREDIT_CARD
  CRYPTO
}

model Promocode {
  id        String   @id @default(cuid())
  code      String
  discount  Float
  createdAt DateTime @default(now())
}
