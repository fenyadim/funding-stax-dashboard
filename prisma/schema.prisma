datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  role          Role       @default(USER)
  parentRef     Referral[] @relation("parent")
  referrals     Referral[] @relation("referral")
  childRef      Referral[] @relation("child")

  payouts    Payouts[]
  challenges Challenge[]
  sessions   Session[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Referral  Referral[]
}

model Referral {
  userId  String @id
  procent Float

  userParent   User?   @relation(fields: [userParentId], references: [id], name: "parent")
  userParentId String?
  userReferral User?   @relation(fields: [userReferralId], references: [id], name: "referral")
  userReferralId String?
  userChild    User?   @relation(fields: [userChildId], references: [id], name: "child")
  userChildId  String?

  User User @relation(fields: [userId], references: [id])
}

model Payouts {
  id        String     @id @default(cuid())
  userId    String
  amount    Float
  status    Status
  challenge Challenge?

  User User @relation(fields: [userId], references: [id])
}

model Challenge {
  id            String        @id @default(cuid())
  userId        String
  type          String
  value         Float
  paymentMethod PaymentMethod
  newTrading    Boolean
  payoutId      String        @unique
  createdAt     DateTime      @default(now())

  payout Payouts @relation(fields: [payoutId], references: [id])
  User   User    @relation(fields: [userId], references: [id])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Promocode {
  id        String   @id @default(cuid())
  code      String
  discount  Float
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum Status {
  WAITING
  COMPLETED
  INCOMPLETE
  PROCESSING
}

enum PaymentMethod {
  CREDIT_CARD
  CRYPTO
}
